/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY 0
#define QWERTY_SHIFT_LEFT 1
#define COLEMAK 2
#define COLEMAK_SHIFT_LEFT 3
#define SYMBOLS 4
#define NAV 5
#define NUMPAD 6
#define MAGIC 7

#define AS(keycode) &qh LS(keycode) keycode     // Autoshift Macro

&lt {
    quick-tap-ms = <200>;
};

/ {
    behaviors {
        /* Tap and hold with a longer duration for keys that invoke functions (e.g. alt-tabbing, auto copy-paste, etc.) */
        lh: long_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LONG_HOLD";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <200>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        /* Tap and hold with a medium duration for home-row modifiers */
        hm: home_row {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <190>;
            require-prior-idle-ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        /*
           Home-row mod for the shift keys on character layers, optimised for faster typing.
           Same as above but without require prior idle and shorter tapping terms
        */
        hs: home_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        /* Tap and hold with a short duration for normal keys (i.e. shift left/right keys) */
        qh: quick_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_HOLD";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        /* Toggle layer on tap, kp on hold */
        kp_tog: behavior_kp_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "kp_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <180>;
            bindings = <&kp>, <&tog>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
};

/ {
    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};

    /* Custom Defined Behaviors */
/ {

};

/ {
    combos {
        compatible = "zmk,combos";

        /* ESC when pressing keys in the position of Q & W on the QWERTY keymap simultaneously */
        combo_esc {
            timeout-ms = <50>;
            key-positions = <23 24>;
            layers = <QWERTY QWERTY_SHIFT_LEFT COLEMAK COLEMAK_SHIFT_LEFT>;
            bindings = <&kp ESC>;
        };

        /* NUMLOCK when pressing keys in the position of M & comma on the QWERTY keymap simultaneously */
        combo_numlock {
            timeout-ms = <50>;
            key-positions = <59 60>;
            layers = <QWERTY QWERTY_SHIFT_LEFT COLEMAK COLEMAK_SHIFT_LEFT>;
            bindings = <&kp KP_NUM>;
        };

        /* INSERT when pressing keys in the position of U & I on the QWERTY keymap simultaneously */
        combo_insert {
            timeout-ms = <50>;
            key-positions = <59 60>;
            layers = <QWERTY QWERTY_SHIFT_LEFT COLEMAK COLEMAK_SHIFT_LEFT>;
            bindings = <&kp INSERT>;
        };

        /* Caps word when pressing the keys in the position of Z & X on the QWERTY keymap simultaneously */
        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <47 48>;
            layers = <QWERTY QWERTY_SHIFT_LEFT COLEMAK COLEMAK_SHIFT_LEFT>;
            bindings = <&caps_word>;
        };

        /* Caps lock when pressing the keys in the position of X & C on the QWERTY keymap simultaneously */
        combo_caps_lock {
            timeout-ms = <50>;
            key-positions = <48 49>;
            layers = <QWERTY QWERTY_SHIFT_LEFT COLEMAK COLEMAK_SHIFT_LEFT>;
            bindings = <&kp CAPS>;
        };

        /* Toggle QWERTY shift left when pressing the keys in the position of C & V on the QWERTY keymap simultaneously (QWERTY layers only) */
        /*
        combo_qwerty_shift_left {
            timeout-ms = <50>;
            key-positions = <49 50>;
            layers = <QWERTY QWERTY_SHIFT_LEFT>;
            bindings = <&tog QWERTY_SHIFT_LEFT>;
        };
        */

        /* Toggle COLEMAK shift left when pressing the keys in the position of C & V on the QWERTY keymap simultaneously (COLEMAK layers only) */
        /*
        combo_colemak_shift_left {
            timeout-ms = <50>;
            key-positions = <49 50>;
            layers = <COLEMAK COLEMAK_SHIFT_LEFT>;
            bindings = <&tog COLEMAK_SHIFT_LEFT>;
        };
        */
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        layer_QWERTY {
            bindings = <
        &kp F1               &kp F2         &kp F3        &kp F4          &kp F5                                                                                                                                                  &kp F6       &kp F7       &kp F8        &kp F9            &kp F10
        &kp EQUAL            &kp N1         &kp N2        &kp N3          &kp N4          &kp N5                                                                                                                     &kp N6       &kp N7       &kp N8       &kp N9        &kp N0            &kp MINUS
        &kp TAB              &kp Q          &kp W         &lh LA(TAB) E   &lh LG(TAB) R   &kp T                                                                                                                      &kp Y        &kp U        &kp I        &kp O         &kp P             &kp BSLH
        &kp ESC              &hs LSHIFT A   &hm LCTRL S   &hm LALT D      &hm LGUI F      &hm LGUI G                                                                                                                 &hm RGUI H   &hm RGUI J   &hm LALT K   &hm RCTRL L   &hs RSHIFT SEMI   &kp SQT
        &kp GRAVE            &lh LG(Z) Z    &lh LG(X) X   &lh LG(C) C     &lh LG(V) V     &kp B        &kp_tog LSHFT NAV   &kp_tog LCTRL NUMPAD   &kp LGUI       &kp LGUI   &kp RCTRL  &kp_tog RSHFT SYMBOLS         &kp N        &kp M        &kp COMMA    &kp DOT       &kp FSLH          &kp PG_UP
        &magic MAGIC QWERTY  &kp HOME       &kp END       &kp LEFT        &kp RIGHT                    &lt NAV BSPC        &lt NUMPAD TAB         &kp LALT       &kp RALT   &kp RET    &lt SYMBOLS SPACE                          &kp UP       &kp DOWN     &kp LBKT      &kp RBKT          &kp PG_DN
            >;
        };

        /* Shift the column to the right of the LHS index finger onto the index finger column to avoid having to stretch */
        layer_QWERTY_SHIFT_LEFT {
            bindings = <
        &none   &none    &none    &none    &none                                                                                      &none    &none    &none    &none    &none
        &none   &trans   &trans   &trans   &qh N5 N4   &trans                                                                &trans   &trans    &trans   &trans   &trans   &none
        &none   &trans   &trans   &trans   &qh T R     &trans                                                                &trans   &qh Y U   &trans   &trans   &trans   &none
        &none   &trans   &trans   &trans   &qh G F     &trans                                                                &trans   &qh H J   &trans   &trans   &trans   &none
        &none   &trans   &trans   &trans   &qh B V     &trans   &trans   &trans   &trans          &trans   &trans   &trans   &trans   &qh N M   &trans   &trans   &trans   &none
        &none   &none    &none    &none    &none                &trans   &trans   &trans          &trans   &trans   &trans            &none     &none    &none    &none    &none
            >;
        };

        layer_COLEMAK {
            bindings = <
       &kp F1                 &kp F2         &kp F3        &kp F4          &kp F5                                                                                            &kp F6       &kp F7       &kp F8       &kp F9         &kp F10
       &kp EQUAL              &kp N1         &kp N2        &kp N3          &kp N4          &kp N5                                                              &kp N6        &kp N7       &kp N8       &kp N9       &kp N0         &kp MINUS
       &kp TAB                &kp Q          &kp W         &lh LA(TAB) F   &lh LG(TAB) P   &kp B                                                               &kp J         &kp L        &kp U        &kp Y        &kp SEMI       &kp BSLH
       &kp ESC                &hs LSHIFT A   &hm LCTRL R   &hm LALT S      &hm LGUI T      &hm LGUI G                                                          &hm RGUI M    &hm RGUI N   &hm LALT E   &hm RCTRL I  &hs RSHIFT O   &kp SQT
       &kp GRAVE              &lh LG(Z) Z    &lh LG(X) X   &lh LG(C) C     &lh LG(V) D     &kp V       &trans  &trans  &trans       &trans  &trans  &trans     &kp K         &kp H        &kp COMMA    &kp DOT      &kp FSLH       &kp PG_UP
       &magic MAGIC COLEMAK   &kp HOME       &kp END       &kp LEFT        &kp RIGHT                   &trans  &trans  &trans       &trans  &trans  &trans                   &kp UP       &kp DOWN     &kp LBKT     &kp RBKT       &kp PG_DN
            >;
        };

        /* Shift the column to the right of the LHS index finger onto the index finger column to avoid having to stretch */
        layer_COLEMAK_SHIFT_LEFT {
            bindings = <
        &none   &none    &none    &none    &none                                                                                      &none    &none    &none    &none    &none
        &none   &trans   &trans   &trans   &qh N5 N4   &trans                                                                &trans   &trans    &trans   &trans   &trans   &none
        &none   &trans   &trans   &trans   &qh B P     &trans                                                                &trans   &qh J L   &trans   &trans   &trans   &none
        &none   &trans   &trans   &trans   &qh G T     &trans                                                                &trans   &qh M N   &trans   &trans   &trans   &none
        &none   &trans   &trans   &trans   &qh V D     &trans   &trans   &trans   &trans          &trans   &trans   &trans   &trans   &qh K H   &trans   &trans   &trans   &none
        &none   &none    &none    &none    &none                &trans   &trans   &trans          &trans   &trans   &trans            &none     &none    &none    &none    &none
            >;
        };

        layer_SYMBOLS {
            bindings = <
        &trans     &trans              &trans          &trans          &trans                                                                                                 &trans          &trans             &trans                  &trans                  &trans
        &trans     &trans              &trans          &trans          &trans                &trans                                                              &trans       &trans          &trans             &trans                  &trans                  &trans
        &trans     &kp EXCL            &kp AT          &kp LA(N3)      &kp DOLLAR            &kp PERCENT                                                         &kp CARET    &kp AMPERSAND   &kp ASTERISK       &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS   &trans
        &trans     &hm LSHIFT N1       &hm LCTRL N2    &hm LALT N3     &hm LGUI N4           &kp N5                                                              &kp N6       &hm RGUI N7     &hm LALT N8        &hm RCTRL N9            &hm RSHIFT N0           &trans
        &trans     AS(GRAVE)           AS(BACKSLASH)   &none           AS(MINUS)             &none          &trans  &trans  &trans      &trans  &trans  &trans   &kp LS(N3)   AS(EQUAL)       AS(LEFT_BRACKET)   AS(RIGHT_BRACKET)       AS(SINGLE_QUOTE)        &trans
        &trans     &trans              &trans          &trans          &trans                               &trans  &trans  &trans      &trans  &trans  &trans                &trans          &trans             &trans                  &trans                  &trans
            >;
        };

        layer_NAV {
            bindings = <
        &trans    &trans          &trans          &trans        &trans                                                                                            &trans                &trans                &trans               &trans                   &trans
        &trans    &trans          &trans          &trans        &trans           &trans                                                                &trans     &trans                &trans                &trans               &trans                   &trans
        &trans    &kp F1          &kp F2          &kp F3        &kp F4           &kp F5                                                                &kp F6     &kp F7                &kp F8                &kp F9               &kp F10                  &kp F11
        &trans    &hm LSHIFT F11  &hm LCTRL F12   &hm LALT DEL  &hm LGUI ESCAPE  &kp DEL                                                               &none      &kp LEFT_ARROW        &kp DOWN_ARROW        &kp UP_ARROW         &kp RIGHT_ARROW          &kp F12
        &trans    &kp LG(Z)       &kp LG(X)       &kp LG(C)     &kp LG(V)        &kp LG(B)   &trans   &trans  &trans        &trans  &trans  &trans     &kp CAPS   &kp HOME              &kp PG_DN             &kp PG_UP            &kp END                  &trans
        &trans    &trans          &trans          &trans        &trans                       &trans   &trans  &trans        &trans  &trans  &trans                &trans                &trans                &trans               &trans                   &trans
            >;
        };

        layer_NUMPAD {
            bindings = <
        &trans    &trans       &trans        &trans         &trans                                                                                             &trans       &trans        &trans        &trans         &trans
        &trans    &trans       &trans        &trans         &trans         &trans                                                                     &trans   &trans       &kp FSLH      &kp ASTERISK  &trans         &trans
        &trans    &to QWERTY   &to COLEMAK   &kp C_BRI_DN   &kp C_BRI_UP   &none                                                                      &kp F4   &kp KP_N7    &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &trans
        &trans    &none        &none         &kp LG(R)      &kp LG(F)      &none                                                                      &kp F2   &kp KP_N4    &kp KP_N5     &kp KP_N6     &kp KP_PLUS    &trans
        &trans    &kp C_PP     &kp C_NEXT    &kp C_VOL_DN   &kp C_VOL_UP   &kp LS(LG(V))   &trans   &trans   &trans       &trans  &trans  &trans      &none    &kp KP_N1    &kp KP_N2     &kp KP_N3     &kp KP_DOT     &trans
        &trans    &trans       &trans        &trans         &trans                         &trans   &trans   &trans       &trans  &trans  &kp KP_N0            &trans       &trans        &trans        &trans         &trans
            >;
        };

        layer_MAGIC {
            bindings = <
    &bt BT_CLR            &none            &none            &none            &none                                                                                     &none   &none   &none   &none  &bt BT_CLR_ALL
         &none            &none            &none            &none            &none            &none                                                            &none   &none   &none   &none   &none           &none
         &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                            &none   &none   &none   &none   &none           &none
   &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                            &none   &none   &none   &none   &none     &bootloader
         &none            &none            &none            &none            &none            &none      &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none           &none
         &none            &none            &none            &none            &none                       &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &to 3
              >;
        };

    };
};
